package tld.company.taxp

import tld.company.taxp.model.OpEx
import tld.company.taxp.model.Pipeline
import tld.company.taxp.model.Project
import tld.company.taxp.model.pipeline.SCM

class DescriptionHelper {

    static String disclaimer = '<p><strong>WARNING:</strong> this job is generated by the JobDSL plugin. Any changes made to the configuration will be lost on the next job generation run!</p>'
    private OpExResolver opExResolver

    DescriptionHelper(OpExResolver opExResolver) {
        this.opExResolver = opExResolver
    }

    String projectHeader(Project project) {
        return """
            <h2>Project</h2>
            <ul>
                <li><b>ShortName:</b> ${project.shortName}</li>
                <li><b>FullName:</b> ${project.fullName.replaceAll('_', ' ')}</li>
            </ul>
        """
    }

    String pipelineHeader(Pipeline pipeline) {
        return """
            <h2>PipeLine</h2>
            <ul>
                <li><b>ID:</b> ${pipeline.id ? pipeline.id : 'inherited'}</li>
                <li><b>Pipeline Type:</b> ${pipeline.type}</li>
                <li><b>Build Tool:</b> ${pipeline.tool.type} ${pipeline.tool.version}</li>
                <li><b>Technology:</b> ${pipeline.technology.type} ${pipeline.technology.version}</li>
                <li><b>SCM Base (${pipeline.scm.type}):</b> ${pipeline.scm.base}</li>
            </ul>"""
    }

    String opExHeader(OpEx opEx) {
        if (!opEx) {
            return ''
        }
        String template = "<h2>Operational Excellence</h2>\n"
        if (opEx.ldapTeamNames) {
            template += "<p>The following team(s) or person(s) share Operational Excellence over this application. If you have any questions about it, contact them:</p>\n<ul>"
            opEx.ldapTeamNames.each { ldapTeamName ->
                template += "<li>${ldapTeamName}</li>\n"
            }
            template += "</ul>\n"
        } else {
            template += """<p>No Operational Excellence has been defined for this project. Do you have OpEx over this project, find out how to get access <a href="https://company-wiki/path/to/page/Configure+security">here</a>!</p>\n"""
        }

        if (opEx.teamEmails) {
            template += "<p>The following teams or persons will be notified if this job fails:</p>\n<ul>"
            opEx.teamEmails.each { teamEmail ->
                template += "<li>${teamEmail}</li>\n"
            }
            template += "</ul>\n"
        }
        return template
    }

    String cloneInSourceTreeSnippet(cloneUrl) {
        def baseWebUrl = "https://git.company.tld"
        def link = "sourcetree://cloneRepo?type=stash&baseWebUrl=${URLEncoder.encode(baseWebUrl)}&cloneUrl=${URLEncoder.encode(cloneUrl)}"
        return """<a href="${
            link
        }"><img src="https://jenkins.company.tld/userContent/sourcetree-logo.png" style="width:30px"></a> <a href="${
            link
        }">[Clone in SourceTree]</a>"""
    }

    String createHeaders(Project project, Pipeline pipeline) {
        OpEx opEx = opExResolver.getForProject(project.shortName)
        SCM scm = pipeline.getScm()
        return """
            ${projectHeader(project)}
            ${pipelineHeader(pipeline)}
            ${opExHeader(opEx)}
            ${scm.type.toString().equalsIgnoreCase("git") ? cloneInSourceTreeSnippet(scm.base) : ''}
            ${DescriptionHelper.disclaimer}
            """.stripIndent()
    }
}
